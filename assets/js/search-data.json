{
  
    
        "post0": {
            "title": "Fast Parallel Cheminformatics Workflows With Dask",
            "content": "In this post we&#39;ll take a look at how we can use Dask to parallelize and speed up Cheminformatics workflows with a couple of lines of code. As an example we&#39;ll write a scritpt to calculate the properties from Lipinski&#39;s Rule of 5. Just for fun, we&#39;ll also add in the number of rotatable bonds. We&#39;ll start by implementing a simple serial version, then modify that to run in parallel with Dask. . Single Processor Version . First we&#39;ll import the necessary Python libraries. . import pandas as pd from rdkit import Chem from rdkit.Chem import Descriptors . First, let&#39;s ensure that that Pandas dataframes are dispalyed with an appropriate number of decimal places. . pd.options.display.float_format = &quot;{:,.2f}&quot;.format . Next, we&#39;ll define a function to calculate the properties . def calc_r5(smiles): mol = Chem.MolFromSmiles(smiles) dummy = -9999.0 res = [dummy, dummy, dummy, dummy, dummy] if mol: res = [Descriptors.MolWt(mol),Descriptors.MolLogP(mol),Descriptors.NumHDonors(mol), Descriptors.NumHAcceptors(mol),Descriptors.NumRotatableBonds(mol)] return res . Now we&#39;ll read a SMILES file into a Pandas dataframe . infile_name = &quot;test.smi&quot; df = pd.read_csv(infile_name,sep=&quot; &quot;,names=[&quot;SMILES&quot;,&quot;Name&quot;]) . Now we can calculate the properties for the SMILES in the dataframe. . df[&#39;R5&#39;] = df.SMILES.apply(calc_r5) . Now we have all of the properties as a list in one column. This isn&#39;t what we want, however, we can use this trick to create new columns from the list. . df[[&quot;MW&quot;,&quot;LogP&quot;,&quot;HBD&quot;,&quot;HBA&quot;,&quot;Rot&quot;]] = df.R5.to_list() . df . SMILES Name R5 MW LogP HBD HBA Rot . 0 Br.CC(NC(C)(C)C)C(=O)c1cccc(Cl)c1 | 675686 | [320.658, 3.877200000000003, 1, 2, 3] | 320.66 | 3.88 | 1 | 2 | 3 | . 1 Br.Cc1ccc(Sc2ccccc2N3CCNCC3)c(C)c1 | 1379657 | [379.3670000000002, 4.442140000000004, 1, 3, 3] | 379.37 | 4.44 | 1 | 3 | 3 | . 2 Br.CN(C)CCCC1(OCc2cc(ccc12)C#N)c3ccc(F)cc3 | 674732 | [405.31100000000004, 4.390880000000004, 0, 3, 5] | 405.31 | 4.39 | 0 | 3 | 5 | . 3 Br.CN1CCC[C@@H]1Cc2c[nH]c3ccc(CCS(=O)(=O)c4ccc... | 674954 | [463.4410000000002, 4.398900000000004, 1, 3, 6] | 463.44 | 4.40 | 1 | 3 | 6 | . 4 Br.COc1ccc2CN(C)CC[C@@]34C=C[C@H](O)C[C@@H]3Oc... | 443255 | [368.2710000000001, 2.4282000000000004, 1, 4, 1] | 368.27 | 2.43 | 1 | 4 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 95 CC(C)CC(N(C)C)C1(CCC1)c2ccc(Cl)cc2 | 358192 | [279.85499999999996, 4.738000000000005, 0, 1, 5] | 279.85 | 4.74 | 0 | 1 | 5 | . 96 CC(C)CC1(CC=C)C(=O)NC(=O)NC1=O | 2524 | [224.26, 0.9609999999999999, 2, 3, 4] | 224.26 | 0.96 | 2 | 3 | 4 | . 97 CC(C)Cc1ccc(cc1)C(C)C(=O)O | 11674 | [206.28499999999997, 3.073200000000001, 1, 1, 4] | 206.28 | 3.07 | 1 | 1 | 4 | . 98 CC(C)CCC[C@@H](C)[C@H]1CC[C@H]2 C(=C C=C/3 C[C... | 125294 | [384.6480000000003, 7.619000000000009, 1, 1, 6] | 384.65 | 7.62 | 1 | 1 | 6 | . 99 CC(C)CN(C[C@@H](O)[C@H](Cc1ccccc1)NC(=O)O[C@H]... | 17347 | [505.63700000000034, 2.4028, 3, 7, 11] | 505.64 | 2.40 | 3 | 7 | 11 | . 100 rows × 8 columns . At this point, we no longer need the R5 column, so we can get rid of it. . df.drop(&quot;R5&quot;,axis=1,inplace=True) . Finally, we can write the results to csv file. . df.to_csv(&quot;props.csv&quot;,index=False) . Parallel Version . In order to parallelize this calculation with Dask, we need a couple of addtional imports . import dask.dataframe as dd . We also need to convert the Pandas dataframe to a Dask dataframe. In the constructor for the Dask dataframe, we&#39;ll specify an argument &quot;npartitions&quot;, that specifies the number of chunks to divided the dataframe into for the calculation. This seems to be most efficeint when we set &quot;npartitions&quot; to the number of processors. . num_cores = 8 ddf = dd.from_pandas(df,npartitions=num_cores) . Parallelization with Dask requires a function that accepts a dataframe as input. We can define a function that uses the &quot;apply&quot; from the serial version above. . def df_r5(df_in): return df_in.SMILES.apply(calc_r5) . Now we can parallelize our workflow with a single line of code. . df[&quot;R5&quot;] = ddf.map_partitions(df_r5,meta=&#39;float&#39;).compute(scheduler=&#39;processes&#39;) . We can use the same method we described about to split the &quot;R5&quot; column into mulitple columns. . df[[&quot;MW&quot;,&quot;LogP&quot;,&quot;HBD&quot;,&quot;HBA&quot;,&quot;Rot&quot;]] = df.R5.to_list() df.drop(&quot;R5&quot;,axis=1,inplace=True) . Benchmarking . Let&#39;s take a look at how much of a speedup we can get by using Dask. To do this, we&#39;ll take a look at how long it takes to calculate the five properties above for 1 million molecules from ZINC database. The input file is large so I didn&#39;t include it in this post. Here&#39;s the code I used to perform the benchmark. . import time df = pd.read_csv(&quot;zinc_1M.smi&quot;,sep=&quot; &quot;,names=[&quot;SMILES&quot;,&quot;Name&quot;]) runtime_res = [] for num_cores in range(1,9): ddf = dd.from_pandas(df,npartitions=num_cores) start = time.time() df[&quot;R5&quot;] = ddf.map_partitions(df_r5,meta=&#39;float&#39;).compute(scheduler=&#39;processes&#39;) elapsed = time.time()-start df[[&quot;MW&quot;,&quot;LogP&quot;,&quot;HBD&quot;,&quot;HBA&quot;,&quot;Rot&quot;]] = df.R5.to_list() df.drop(&quot;R5&quot;,axis=1,inplace=True) df.to_csv(&quot;props.csv&quot;,index=False,float_format=&quot;%0.2f&quot;) print(f&quot;{len(df)} molecules processed in {elapsed:0.2f} sec on {num_cores} cores&quot;) runtime_res.append([elapsed,num_cores]) . 1000000 molecules processed in 714.70 sec on 1 cores 1000000 molecules processed in 378.56 sec on 2 cores 1000000 molecules processed in 272.38 sec on 3 cores 1000000 molecules processed in 211.11 sec on 4 cores 1000000 molecules processed in 177.00 sec on 5 cores 1000000 molecules processed in 158.07 sec on 6 cores 1000000 molecules processed in 146.98 sec on 7 cores 1000000 molecules processed in 142.83 sec on 8 cores . Make a datafrme so that we can view the results. We&#39;ll add a column with the runtime ratio for n cores to 1 core. . runtime_df = pd.DataFrame(runtime_res,columns=[&quot;Runtime&quot;,&quot;Cores&quot;]) one_core_time = runtime_df.Runtime.values[0] runtime_df[&#39;Ratio&#39;] = one_core_time/runtime_df.Runtime . View the results. 5x speed-up with 8 cores, not too bad for one line of code. . runtime_df . Runtime Cores Ratio . 0 714.70 | 1 | 1.00 | . 1 378.56 | 2 | 1.89 | . 2 272.38 | 3 | 2.62 | . 3 211.11 | 4 | 3.39 | . 4 177.00 | 5 | 4.04 | . 5 158.07 | 6 | 4.52 | . 6 146.98 | 7 | 4.86 | . 7 142.83 | 8 | 5.00 | . Plot the results. . import seaborn as sns sns.set(rc={&#39;figure.figsize&#39;: (10, 10)}) sns.set_style(&#39;whitegrid&#39;) sns.set_context(&#39;talk&#39;) ax = sns.scatterplot(x=&quot;Cores&quot;,y=&quot;Runtime&quot;,data=runtime_df) ax.set(ylabel=&quot;Runtime (sec)&quot;); . Acknowledgments . I&#39;d like to thank Yutong Zhao, Greg Landrum, Peter St. John, and Maciek Wójcikowski for valuable advice. .",
            "url": "https://patwalters.github.io/practicalcheminformatics/jupyter/2021/03/28/dask-cheminformatics.html",
            "relUrl": "/jupyter/2021/03/28/dask-cheminformatics.html",
            "date": " • Mar 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://patwalters.github.io/practicalcheminformatics/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://patwalters.github.io/practicalcheminformatics/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://patwalters.github.io/practicalcheminformatics/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://patwalters.github.io/practicalcheminformatics/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}